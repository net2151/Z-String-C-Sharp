<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<#
    static string CreateTypeArgument(int i)
    {
        return string.Join(", ", Enumerable.Range(0, i).Select(x => "T" + x));
    }

    static string CreateParameters(int i)
    {
        return string.Join(", ", Enumerable.Range(0, i).Select(x => "T" + x + " arg" + x));
    }


    static string CreateParameterNames(int i)
    {
        return string.Join(", ", Enumerable.Range(0, i).Select(x => "arg" + x));
    }
#>
using System;
using System.Buffers;

namespace Cysharp.Text
{
    public partial struct Utf8ValueStringBuilder
    {
<# for(var i = 1; i <= 16; i++) { #>
        public void AppendFormat<<#= CreateTypeArgument(i) #>>(string format, <#= CreateParameters(i) #>)
        {
            var copyFrom = 0;
            for (int i = 0; i < format.Length; i++)
            {
                if (format[i] == '{')
                {
                    // escape.
                    if (i == format.Length - 1)
                    {
                        throw new FormatException("invalid format");
                    }

                    if (i != format.Length && format[i + 1] == '{')
                    {
                        var size = i - copyFrom;
                        TryGrow(UTF8NoBom.GetMaxByteCount(size));
                        index += UTF8NoBom.GetBytes(format.AsSpan(copyFrom, size), buffer.AsSpan(index));
                        i = i + 1; // skip escaped '{'
                        copyFrom = i;
                        continue;
                    }
                    else
                    {
                        var size = i - copyFrom;
                        TryGrow(UTF8NoBom.GetMaxByteCount(size));
                        index += UTF8NoBom.GetBytes(format.AsSpan(copyFrom, size), buffer.AsSpan(index));
                    }

                    // try to find range
                    var indexParse = FormatParser.Parse(format.AsSpan(i));
                    copyFrom = i + indexParse.LastIndex + 1;
                    i = i + indexParse.LastIndex;
                    var writeFormat = StandardFormat.Parse(indexParse.FormatString);
                    switch (indexParse.Index)
                    {
<# for(var j = 0; j < i; j++) { #>
                        case <#= j #>:
                            {
                                if (!FormatterCache<T<#= j #>>.TryFormatDelegate(arg<#= j #>, buffer.AsSpan(index), out var written, writeFormat))
                                {
                                    Grow();
                                    if (!FormatterCache<T<#= j #>>.TryFormatDelegate(arg<#= j #>, buffer.AsSpan(index), out written, writeFormat))
                                    {
                                        ThrowArgumentException(nameof(arg<#= j #>));
                                    }
                                }
                                index += written;
                                goto NEXT_LOOP;
                            }
<# } #>
                        default:
                            ThrowFormatException();
                            break;
                    }

                    ThrowFormatException();
                }
                else if (format[i] == '}')
                {
                    if (i != format.Length && format[i + 1] == '}')
                    {
                        var size = i - copyFrom;
                        TryGrow(UTF8NoBom.GetMaxByteCount(size));
                        index += UTF8NoBom.GetBytes(format.AsSpan(copyFrom, size), buffer.AsSpan(index));
                        i = i + 1; // skip escaped '}'
                        copyFrom = i;
                    }
                }

                NEXT_LOOP:
                continue;
            }

            {
                // copy final string
                var copyLength = format.Length - copyFrom;
                if (copyLength > 0)
                {
                    TryGrow(UTF8NoBom.GetMaxByteCount(copyLength));
                    index += UTF8NoBom.GetBytes(format.AsSpan(copyFrom, copyLength), buffer.AsSpan(index));
                }
            }
        }

        public void AppendFormatLine<<#= CreateTypeArgument(i) #>>(string format, <#= CreateParameters(i) #>)
        {
            AppendFormat(format, <#= CreateParameterNames(i) #>);
            AppendNewLine();
        }

<# } #>
    }
}