<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<#
    static string CreateTypeArgument(int i)
    {
        return string.Join(", ", Enumerable.Range(0, i).Select(x => "T" + x));
    }

    static string CreateParameters(int i)
    {
        return string.Join(", ", Enumerable.Range(0, i).Select(x => "T" + x + " arg" + x));
    }


    static string CreateParameterNames(int i)
    {
        return string.Join(", ", Enumerable.Range(0, i).Select(x => "arg" + x));
    }
#>
using System;

namespace Cysharp.Text
{
    public partial struct Utf8ValueStringBuilder
    {
<# for(var i = 2; i <= 16; i++) { #>
        public void AppendMany<<#= CreateTypeArgument(i) #>>(<#= CreateParameters(i) #>)
        {
            int written;

<# for(var j = 0; j < i; j++) { #>
            if (!FormatterCache<T<#= j #>>.TryFormatDelegate(arg<#= j #>, buffer.AsSpan(index), out written, default))
            {
                Grow(written);
                if (!FormatterCache<T<#= j #>>.TryFormatDelegate(arg<#= j #>, buffer.AsSpan(index), out written, default))
                {
                    ThrowArgumentException(nameof(arg<#= j #>));
                }
            }
            index += written;

<# } #>
        }

        public void AppendManyLine<<#= CreateTypeArgument(i) #>>(<#= CreateParameters(i) #>)
        {
            AppendMany(<#= CreateParameterNames(i) #>);
            AppendNewLine();
        }

<# } #>
    }
}