<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<#
    var spanFormattables = new Type[]
    {
        typeof(Byte),
        typeof(DateTime),
        typeof(DateTimeOffset),
        typeof(Decimal),
        typeof(Double),
        typeof(Int16),
        typeof(Int32),
        typeof(Int64),
        typeof(SByte),
        typeof(Single),
        typeof(TimeSpan),
        typeof(UInt16),
        typeof(UInt32),
        typeof(UInt64),
        typeof(Guid),
        // typeof(Version),
    };
#>
using System;
using System.Runtime.CompilerServices;

namespace Cysharp.Text
{
    public ref partial struct Utf16ValueStringBuilder
    {        
<# foreach(var t in spanFormattables) { #>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void Append(<#= t.Name #> value)
        {
            if(!value.TryFormat(buffer.AsSpan(index), out var written))
            {
                Grow();
                if(!value.TryFormat(buffer.AsSpan(index), out written))
                {
                    ThrowArgumentException(nameof(value));
                }
            }
            index += written;
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void Append(<#= t.Name #> value, ReadOnlySpan<char> format)
        {
            if(!value.TryFormat(buffer.AsSpan(index), out var written, format))
            {
                Grow();
                if(!value.TryFormat(buffer.AsSpan(index), out written, format))
                {
                    ThrowArgumentException(nameof(value));
                }
            }
            index += written;
        }

<# } #>
    }
}